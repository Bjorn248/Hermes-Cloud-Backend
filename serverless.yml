# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hermes-cloud-backend
app: hermes-cloud
tenant: bjorn248

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.28.0"

provider:
  name: aws
  runtime: go1.x
  # apiGateway:
  #   restApiId:
  #     Ref: HermesApiGateway
  #   restApiResources:
  #     Fn::GetAtt:
  #         - HermesAPIGW
  #         - RootResourceId

# you can overwrite defaults here
  stage: dev
  region: us-east-2
  profile: pbj

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  user_registration:
    handler: bin/user_registration
    role: userRegistrationRole
    environment:
      COGNITO_APP_CLIENT_ID: ${opt:cognito_app_client_id}
    events:
      - http:
          path: register
          method: post
  device_registration:
    handler: bin/device_registration
    role: deviceRegistrationRole
    events:
      - http:
          path: device
          method: post
          request:
            parameters:
              headers:
                X-HERMES-CLOUD-TOKEN: true
          authorizer:
            identitySource: method.request.header.X-HERMES-CLOUD-TOKEN
            arn: ${opt:user_pool_arn}
#          authorizer:
#            type: COGNITO_USER_POOLS
#            authorizerId:
#              Ref: ApiGatewayAuthorizer
  device_update:
    handler: bin/device_update
    role: deviceUpdateRole
    events:
      - http:
          path: device
          method: put
          request:
            parameters:
              headers:
                X-HERMES-CLOUD-TOKEN: true
          authorizer:
            identitySource: method.request.header.X-HERMES-CLOUD-TOKEN
            arn: ${opt:user_pool_arn}
#          authorizer:
#            type: COGNITO_USER_POOLS
#            authorizerId:
#              Ref: ApiGatewayAuthorizer
resources:
  Resources:
    userRegistrationRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: userRegistrationRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaUserRegistrationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - cognito-idp:SignUp
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:cognito-idp'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - "userpool/${opt:cognito_pool_id}"
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/users'
    deviceRegistrationRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: deviceRegistrationRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaDeviceRegistrationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/devices'
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/users'
    deviceUpdateRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: deviceUpdateRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaDeviceUpdatePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/devices'
#    HermesAPIGW:
#      Type: AWS::ApiGateway::RestApi
#      Properties:
#        Name: HermesApiGateway
#    ApiGatewayAuthorizer:
#      Type: AWS::ApiGateway::Authorizer
#      Properties:
#        AuthorizerResultTtlInSeconds: 300
#        IdentitySource: method.request.header.X-HERMES-CLOUD-TOKEN
#        Name: Cognito
#        RestApiId:
#          Ref: HermesApiGateway
#        Type: COGNITO_USER_POOLS
#        ProviderARNs:
#          - ${opt:user_pool_arn}
#  Outputs:
#    apiGatewayRestApiId:
#      Value:
#        Ref: HermesApiGateway
#      Export:
#        Name: apiGateway-restApiId
#    apiGatewayRestApiRootResourceId:
#      Value:
#         Fn::GetAtt:
#          - HermesAPIGW
#          - RootResourceId
#      Export:
#        Name: apiGateway-rootResourceId
